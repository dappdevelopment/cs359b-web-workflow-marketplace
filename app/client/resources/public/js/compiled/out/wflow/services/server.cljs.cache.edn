{:rename-macros {}, :renames {}, :externs {jQuery {}, Error {}, Promise {}}, :use-macros {}, :excludes #{}, :name wflow.services.server, :imports nil, :requires {o oops.core, oops.core oops.core, t wflow.utils.transit, wflow.utils.transit wflow.utils.transit, w clojure.walk, clojure.walk clojure.walk, qd goog.Uri.QueryData, goog.Uri.QueryData goog.Uri.QueryData}, :cljs.spec/speced-vars [], :uses nil, :defs {$ {:name wflow.services.server/$, :file "src/cljs/wflow/services/server.cljs", :line 8, :column 1, :end-line 8, :end-column 7, :meta {:file "/Users/allanjiang/Developer/dapps/cs359b-web-workflow-marketplace/app/client/src/cljs/wflow/services/server.cljs", :line 8, :column 6, :end-line 8, :end-column 7}, :tag js}, text->clj {:name wflow.services.server/text->clj, :file "src/cljs/wflow/services/server.cljs", :line 11, :column 1, :end-line 11, :end-column 15, :meta {:file "/Users/allanjiang/Developer/dapps/cs359b-web-workflow-marketplace/app/client/src/cljs/wflow/services/server.cljs", :line 11, :column 6, :end-line 11, :end-column 15}, :tag any}, ajax {:protocol-inline nil, :meta {:file "/Users/allanjiang/Developer/dapps/cs359b-web-workflow-marketplace/app/client/src/cljs/wflow/services/server.cljs", :line 14, :column 7, :end-line 14, :end-column 11, :arglists (quote ([method path] [method path {:as options, :keys [query data]}])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([method path] [method path {:as options, :keys [query data]}]), :arglists ([method path] [method path {:as options, :keys [query data]}]), :arglists-meta (nil nil)}}, :name wflow.services.server/ajax, :variadic false, :file "src/cljs/wflow/services/server.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([method path] [method path {:as options, :keys [query data]}]), :arglists ([method path] [method path {:as options, :keys [query data]}]), :arglists-meta (nil nil)}, :method-params ([method path] [method path {:as options, :keys [query data]}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists ([method path] [method path {:as options, :keys [query data]}])}}, :cljs.spec/registry-ref [], :require-macros {o oops.core, oops.core oops.core}, :cljs.analyzer/constants {:seen #{:authorization :query :data}, :order [:query :data :authorization]}, :doc nil}