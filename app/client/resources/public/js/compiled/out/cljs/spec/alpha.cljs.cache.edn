{:rename-macros {}, :renames {}, :externs {Error {}, goog {string {StringBuffer {prototype {append {}}}}}}, :use-macros {}, :excludes #{cat * or merge keys + and def}, :name cljs.spec.alpha, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.gen.alpha, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk, cljs.spec.gen.alpha cljs.spec.gen.alpha}, :cljs.spec/speced-vars [], :uses nil, :defs {form {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 162, :column 7, :end-line 162, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec.alpha/form, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, nilable-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1360, :column 19, :end-line 1360, :end-column 31, :skip-wiki true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, :name cljs.spec.alpha/nilable-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 31, :method-params ([form pred gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1360, :end-line 1360, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form pred gfn])), :doc "Do not call this directly, use 'nilable'"}, *recursion-limit* {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}, :name cljs.spec.alpha/*recursion-limit*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 33, :column 1, :dynamic true, :line 21, :end-line 21, :tag number, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, *coll-error-limit* {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 35, :column 16, :end-line 35, :end-column 34, :dynamic true}, :name cljs.spec.alpha/*coll-error-limit*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 34, :column 1, :dynamic true, :line 35, :end-line 35, :tag number, :doc "The number of errors reported by explain in a collection spec'ed with 'every'"}, ->t_cljs$spec$alpha35415 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cnt meta35416])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha35415, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :method-params ([forms preds gfn specs cnt meta35416]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 551, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cnt meta35416])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-printer {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 216, :column 7, :end-line 216, :end-column 22, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, :name cljs.spec.alpha/explain-printer, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 22, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "Default printer for explain-data. nil indicates a successful validation."}, op-explain {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1112, :column 8, :end-line 1112, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec.alpha/op-explain, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1112, :end-line 1112, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, Specize {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 123, :column 14, :end-line 123, :end-column 21, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {specize* [[_] [_ form]]}}}, :protocol-symbol true, :name cljs.spec.alpha/Specize, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 21, :column 1, :line 123, :protocol-info {:methods {specize* [[_] [_ form]]}}, :info nil, :end-line 123, :tag any, :impls #{cljs.spec.alpha/t_cljs$spec$alpha35470 cljs.core/Keyword cljs.spec.alpha/t_cljs$spec$alpha35392 default cljs.spec.alpha/t_cljs$spec$alpha35646 cljs.spec.alpha/t_cljs$spec$alpha35420 cljs.spec.alpha/t_cljs$spec$alpha35402 cljs.spec.alpha/t_cljs$spec$alpha35351 cljs.spec.alpha/t_cljs$spec$alpha35415 cljs.spec.alpha/t_cljs$spec$alpha35665 cljs.spec.alpha/t_cljs$spec$alpha35668 cljs.spec.alpha/t_cljs$spec$alpha35653 cljs.core/Symbol cljs.spec.alpha/t_cljs$spec$alpha35481 cljs.spec.alpha/t_cljs$spec$alpha35493}, :doc nil, :jsdoc ("@interface")}, alt-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 996, :column 19, :end-line 996, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec.alpha/alt-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 996, :end-line 996, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, tagged-ret {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 607, :column 8, :end-line 607, :end-column 18, :private true, :arglists (quote ([v]))}, :private true, :name cljs.spec.alpha/tagged-ret, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 607, :end-line 607, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, pvalid? {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 365, :column 8, :end-line 365, :end-column 15, :private true, :arglists (quote ([pred x] [pred x form])), :doc "internal helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec.alpha/pvalid?, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([pred x] [pred x form]), :arglists ([pred x] [pred x form]), :arglists-meta (nil nil)}, :method-params ([pred x] [pred x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 3, :fn-var true, :arglists ([pred x] [pred x form]), :doc "internal helper function that returns true when x is valid for spec."}, def-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 293, :column 19, :end-line 293, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec.alpha/def-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, *explain-out* {:name cljs.spec.alpha/*explain-out*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 249, :column 1, :end-line 249, :end-column 29, :dynamic true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 249, :column 16, :end-line 249, :end-column 29, :dynamic true}}, *runtime-asserts* {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1432, :column 3, :end-line 1432, :end-column 20, :private true, :dynamic true}, :private true, :name cljs.spec.alpha/*runtime-asserts*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 20, :column 1, :dynamic true, :line 1430, :end-line 1432, :tag boolean}, regex-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1244, :column 19, :end-line 1244, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec.alpha/regex-spec-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 1244, :end-line 1244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, merge-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 767, :column 19, :end-line 767, :end-column 34, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, :name cljs.spec.alpha/merge-spec-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 34, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 767, :end-line 767, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'merge'"}, ->t_cljs$spec$alpha35470 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn specs cform meta35471])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha35470, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :method-params ([forms preds gfn specs cform meta35471]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 734, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds gfn specs cform meta35471])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec$alpha35481 {:num-fields 4, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha35481, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 3, :line 770, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, explain-data* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 200, :column 7, :end-line 200, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec.alpha/explain-data*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1063, :column 8, :end-line 1063, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec.alpha/add-ret, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1063, :end-line 1063, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 692, :column 8, :end-line 692, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec.alpha/explain-pred-list, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, ->t_cljs$spec$alpha35493 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form max-count p__35490 check? gfn gen-max pred cpred conform-keys kind-form addcv cfns describe-form distinct spec kfn gen-into map__35491 count min-count opts kind conform-all conform-into meta35494])), :file nil}, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/->t_cljs$spec$alpha35493, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :method-params ([form max-count p__35490 check? gfn gen-max pred cpred conform-keys kind-form addcv cfns describe-form distinct spec kfn gen-into map__35491 count min-count opts kind conform-all conform-into meta35494]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 833, :max-fixed-arity 25, :fn-var true, :arglists (quote ([form max-count p__35490 check? gfn gen-max pred cpred conform-keys kind-form addcv cfns describe-form distinct spec kfn gen-into map__35491 count min-count opts kind conform-all conform-into meta35494])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, MAX_INT {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :const true}, :name cljs.spec.alpha/MAX_INT, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 21, :const-expr {:op :constant, :env {:context :expr}, :form 9007199254740991, :tag number}, :column 1, :const true, :line 19, :end-line 19, :tag number}, t_cljs$spec$alpha35493 {:num-fields 25, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha35493, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 6, :line 833, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, check-asserts {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1440, :column 7, :end-line 1440, :end-column 20, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."}, :name cljs.spec.alpha/check-asserts, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 20, :method-params ([flag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1440, :end-line 1440, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flag])), :doc "Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."}, alt2 {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 994, :column 8, :end-line 994, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec.alpha/alt2, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 994, :end-line 994, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, assert* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1448, :column 7, :end-line 1448, :end-column 14, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, :name cljs.spec.alpha/assert*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1448, :end-line 1448, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Do not call this directly, use 'assert'."}, inst-in-range? {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1395, :column 7, :end-line 1395, :end-column 21, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, :name cljs.spec.alpha/inst-in-range?, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 21, :method-params ([start end inst]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1395, :end-line 1395, :max-fixed-arity 3, :fn-var true, :arglists (quote ([start end inst])), :doc "Return true if inst at or after start and before end"}, registry-ref {:name cljs.spec.alpha/registry-ref, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 47, :column 1, :end-line 47, :end-column 32, :private true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 47, :column 20, :end-line 47, :end-column 32, :private true}, :tag any}, t_cljs$spec$alpha35392 {:num-fields 6, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha35392, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 6, :line 471, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, accept? {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 931, :column 8, :end-line 931, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec.alpha/op]}]))}, :private true, :name cljs.spec.alpha/accept?, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 15, :method-params ([p__35532]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 931, :end-line 931, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec.alpha/op]}]))}, and-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 703, :column 19, :end-line 703, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec.alpha/and-spec-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 703, :end-line 703, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 929, :column 8, :end-line 929, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec.alpha/accept, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 929, :end-line 929, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 336, :column 8, :end-line 336, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec.alpha/recur-limit?, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, describe* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 45, :column 4, :end-line 45, :end-column 13, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/describe*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 379, :column 19, :end-line 379, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec.alpha/map-spec-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 32, :method-params ([p__35348]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 379, :end-line 379, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un keys-pred pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, reg-resolve! {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 66, :column 8, :end-line 66, :end-column 20, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, :private true, :name cljs.spec.alpha/reg-resolve!, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"}, re-explain {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 1218, :column 8, :end-line 1218, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec.alpha/re-explain, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1218, :end-line 1218, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, alts {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 993, :column 8, :end-line 993, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec.alpha/alts, :variadic true, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 993, :end-line 993, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, with-name {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 85, :column 8, :end-line 85, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec.alpha/with-name, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, explain {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 257, :column 7, :end-line 257, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec.alpha/explain, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, spec-name {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 93, :column 8, :end-line 93, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec.alpha/spec-name, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec.alpha/map-spec, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 320, :column 1, :end-line 320, :end-column 18, :declared true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 320, :column 10, :end-line 320, :end-column 18, :declared true}}, with-gen* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 44, :column 4, :end-line 44, :end-column 13, :protocol cljs.spec.alpha/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec.alpha/Spec, :name cljs.spec.alpha/with-gen*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, or-spec-impl {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 613, :column 19, :end-line 613, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec.alpha/or-spec-impl, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 613, :end-line 613, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, specize {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 140, :column 8, :end-line 140, :end-column 15, :private true, :arglists (quote ([s] [s form])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec.alpha/specize, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s form]), :arglists ([s] [s form]), :arglists-meta (nil nil)}, :method-params ([s] [s form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s form])}, t_cljs$spec$alpha35646 {:num-fields 3, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha35646, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 3, :line 1247, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec$alpha35420 {:num-fields 9, :protocols #{cljs.spec.alpha/Spec cljs.core/IMeta cljs.spec.alpha/Specize cljs.core/IWithMeta}, :name cljs.spec.alpha/t_cljs$spec$alpha35420, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :type true, :anonymous true, :column 5, :line 651, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, *fspec-iterations* {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 27, :column 16, :end-line 27, :end-column 34, :dynamic true}, :name cljs.spec.alpha/*fspec-iterations*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 34, :column 1, :dynamic true, :line 27, :end-line 27, :tag number, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :line 39, :column 14, :end-line 39, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec.alpha/Spec, :file "file:/Users/allanjiang/.m2/repository/org/clojure/clojurescript/1.9.908/clojurescript-1.9.908.jar!/cljs/spec/alpha.cljs", :end-column 18, :column 1, :line 39, :protocol-info {:methods {conform* [[spec x]], unform* [[spec y]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 39, :tag any, :impls #{cljs.spec.alpha/t_cljs$spec$alpha35470 cljs.spec.alpha/t_cljs$spec$alpha35392 cljs.spec.alpha/t_cljs$spec$alpha35646 cljs.spec.alpha/t_cljs$spec$alpha35420 cljs.spec.alpha/t_cljs$spec$alpha35402 cljs.spec.alpha/t_cljs$spec$alpha35351 cljs.spec.alpha/t_cljs$spec$alpha35415 cljs.spec.alpha/t_cljs$spec$alpha35665 cljs.spec.alpha/t_cljs$spec$alpha35668 cljs.spec.alpha/t_cljs$spec$alpha35653 cljs.spec.alpha/t_cljs$spec$alpha35481 cljs.spec.alpha/t_cljs$spec$alpha35493}, :doc nil, :jsdoc ("@interface")}, ...}, :cljs.spec/registry-ref [[:cljs.spec.alpha/kvs->map (cljs.spec.alpha/conformer (fn* [p1__35659#] (cljs.core/zipmap (cljs.core/map :cljs.spec.alpha/k p1__35659#) (cljs.core/map :cljs.spec.alpha/v p1__35659#))) (fn* [p1__35660#] (cljs.core/map (cljs.core/fn [[k v]] #:cljs.spec.alpha{:k k, :v v}) p1__35660#)))]], :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha}, :cljs.analyzer/constants {:seen #{form tag max-count :args :cljs.spec.alpha/failure cljs.spec.alpha/* :max-tries :path :req-un map__35349 :opt-un unc p__35490 cljs.spec.alpha/+ :p2 :ret :cljs.spec.alpha/unknown :cljs.spec.alpha/value :gfn :cljs.spec.alpha/recursion-limit :cljs.spec.alpha/name :pred-exprs :into :keys-pred vector? :gen-max :shrunk :fn cljs.spec.alpha/alt predx :rep+ cljs.core/= :opt-keys aform keys->specnames meta35471 :cljs.spec.alpha/rep :pred meta35494 dval :splice check? forms opt :cljs.spec.alpha/accept argspec :else p1__35659# :ks cljs.core/count ...}, :order [:cljs.spec.alpha/op :cljs.spec.alpha/name :cljs.spec.alpha/unknown :cljs.spec.alpha/invalid fn % :else :cljs.spec.alpha/gfn :cljs.spec.alpha/problems :cljs.spec.alpha/spec :cljs.spec.alpha/value :path :pred :val :reason :via :in :cljs.spec.alpha/recursion-limit :args :cljs.spec.alpha/args :opt :req-un :opt-un :gfn :pred-exprs :keys-pred :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec.alpha/keys map__35349 keys->specnames opt req-un opt-un gfn pred-exprs keys-pred argm opt-keys req-specs req id req-keys p__35348 opt-specs ...]}, :doc nil}