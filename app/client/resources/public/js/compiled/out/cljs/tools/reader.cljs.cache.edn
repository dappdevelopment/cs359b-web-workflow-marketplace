{:rename-macros {}, :renames {}, :externs {parseInt {}, isNaN {}, Error {}, String {fromCharCode {}}, Object {}, Number {NaN {}, NEGATIVE_INFINITY {}, POSITIVE_INFINITY {}}, Boolean {}, RegExp {}}, :use-macros {log-source cljs.tools.reader.reader-types}, :excludes #{char *suppress-read* *default-data-reader-fn* read default-data-readers *data-readers* read-line read-string}, :name cljs.tools.reader, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.tools.reader.impl.commons cljs.tools.reader.impl.commons, gstring goog.string, goog.string goog.string, cljs.tools.reader.impl.errors cljs.tools.reader.impl.errors, garray goog.array, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, err cljs.tools.reader.impl.errors, StringBuffer goog.string.StringBuffer, cljs.tools.reader.impl.utils cljs.tools.reader.impl.utils, goog.array goog.array}, :cljs.spec/speced-vars [], :uses {match-number cljs.tools.reader.impl.commons, reader-conditional cljs.tools.reader.impl.utils, whitespace? cljs.tools.reader.impl.utils, read-comment cljs.tools.reader.impl.commons, char cljs.tools.reader.impl.utils, numeric? cljs.tools.reader.impl.utils, ReaderConditional cljs.tools.reader.impl.utils, unread cljs.tools.reader.reader-types, peek-char cljs.tools.reader.reader-types, parse-symbol cljs.tools.reader.impl.commons, second' cljs.tools.reader.impl.utils, desugar-meta cljs.tools.reader.impl.utils, next-id cljs.tools.reader.impl.utils, number-literal? cljs.tools.reader.impl.commons, read-past cljs.tools.reader.impl.commons, indexing-reader? cljs.tools.reader.reader-types, read-char cljs.tools.reader.reader-types, get-column-number cljs.tools.reader.reader-types, ex-info? cljs.tools.reader.impl.utils, get-file-name cljs.tools.reader.reader-types, reader-conditional? cljs.tools.reader.impl.utils, throwing-reader cljs.tools.reader.impl.commons, string-push-back-reader cljs.tools.reader.reader-types, namespace-keys cljs.tools.reader.impl.utils, get-line-number cljs.tools.reader.reader-types}, :defs {NO_MATCH {:name cljs.tools.reader/NO_MATCH, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 473, :column 1, :end-line 473, :end-column 28, :private true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 473, :column 20, :end-line 473, :end-column 28, :private true}, :tag object}, READ_EOF {:name cljs.tools.reader/READ_EOF, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 197, :column 1, :end-line 197, :end-column 28, :private true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 197, :column 20, :end-line 197, :end-column 28, :private true}, :tag object}, unquote-splicing? {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 622, :column 8, :end-line 622, :end-column 25, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/unquote-splicing?, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 25, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 622, :end-line 622, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, read-tagged {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 812, :column 8, :end-line 812, :end-column 19, :private true, :arglists (quote ([rdr initch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-tagged, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr initch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 812, :end-line 812, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr initch opts pending-forms]))}, starting-line-col-info {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 189, :column 8, :end-line 189, :end-column 30, :private true, :arglists (quote ([rdr]))}, :private true, :name cljs.tools.reader/starting-line-col-info, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 30, :method-params ([rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rdr]))}, wrapping-reader {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 389, :column 8, :end-line 389, :end-column 23, :private true, :arglists (quote ([sym])), :doc "Returns a function which wraps a reader in a call to sym"}, :private true, :name cljs.tools.reader/wrapping-reader, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 23, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym])), :doc "Returns a function which wraps a reader in a call to sym"}, read-meta {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 395, :column 8, :end-line 395, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read metadata and return the following object with the metadata applied"}, :private true, :name cljs.tools.reader/read-meta, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 395, :end-line 395, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read metadata and return the following object with the metadata applied"}, read-unicode-char {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 108, :column 8, :end-line 108, :end-column 25, :private true, :arglists (quote ([token offset length base] [rdr initch base length exact?])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader/read-unicode-char, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}, :method-params ([token offset length base] [rdr initch base length exact?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 5, :fn-var true, :arglists ([token offset length base] [rdr initch base length exact?])}, char-code {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 102, :column 8, :end-line 102, :end-column 17, :private true, :arglists (quote ([ch base]))}, :private true, :name cljs.tools.reader/char-code, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 17, :method-params ([ch base]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ch base]))}, read-unmatched-delimiter {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 77, :column 8, :end-line 77, :end-column 32, :private true, :arglists (quote ([rdr ch opts pending-forms]))}, :private true, :name cljs.tools.reader/read-unmatched-delimiter, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 32, :method-params ([rdr ch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr ch opts pending-forms]))}, read-fn {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 554, :column 8, :end-line 554, :end-column 15, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-fn, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 15, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 554, :end-line 554, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, syntax-quote* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 697, :column 8, :end-line 697, :end-column 21, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/syntax-quote*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 21, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 697, :end-line 697, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, bool? {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 687, :column 7, :end-line 687, :end-column 12, :arglists (quote ([x]))}, :name cljs.tools.reader/bool?, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, arg-env {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 546, :column 26, :end-line 546, :end-column 33, :dynamic true, :private true}, :private true, :name cljs.tools.reader/arg-env, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 33, :column 1, :dynamic true, :line 546, :end-line 546, :tag clj-nil}, read-suppress {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 464, :column 8, :end-line 464, :end-column 21, :private true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next form and suppress. Return nil or READ_FINISHED."}, :private true, :name cljs.tools.reader/read-suppress, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 21, :method-params ([first-line rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 464, :end-line 464, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next form and suppress. Return nil or READ_FINISHED."}, *suppress-read* {:name cljs.tools.reader/*suppress-read*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 843, :column 1, :end-line 843, :end-column 31, :dynamic true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 843, :column 16, :end-line 843, :end-column 31, :dynamic true}, :tag boolean}, flatten-map {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 644, :column 8, :end-line 644, :end-column 19, :private true, :arglists (quote ([form])), :doc "Flatten a map into a seq of alternate keys and values"}, :private true, :name cljs.tools.reader/flatten-map, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 19, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 644, :end-line 644, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Flatten a map into a seq of alternate keys and values"}, *default-data-reader-fn* {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 836, :column 16, :end-line 836, :end-column 40, :dynamic true}, :name cljs.tools.reader/*default-data-reader-fn*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 40, :column 1, :dynamic true, :line 836, :end-line 836, :tag clj-nil, :doc "When no data reader is found for a tag and *default-data-reader-fn*\n  is non-nil, it will be called with two arguments, the tag and the value.\n  If *default-data-reader-fn* is nil (the default value), an exception\n  will be thrown for the unknown tag."}, read {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 899, :column 7, :end-line 899, :end-column 11, :arglists (quote ([] [reader] [opts reader] [reader eof-error? eof-value])), :doc "Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is providen, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   To read data structures only, use clojure.tools.reader.edn/read\n\n   Note that the function signature of clojure.tools.reader/read and\n   clojure.tools.reader.edn/read is not the same for eof-handling", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists-meta (nil nil nil)}}, :name cljs.tools.reader/read, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :arglists-meta (nil nil nil)}, :method-params ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 899, :end-line 899, :max-fixed-arity 3, :fn-var true, :arglists ([reader] [{eof :eof, :as opts, :or {eof :eofthrow}} reader] [reader eof-error? sentinel]), :doc "Reads the first object from an IPushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true.\n   Otherwise returns sentinel. If no stream is providen, *in* will be used.\n\n   Opts is a persistent map with valid keys:\n    :read-cond - :allow to process reader conditionals, or\n                 :preserve to keep all branches\n    :features - persistent set of feature keywords for reader conditionals\n    :eof - on eof, return value unless :eofthrow, then throw.\n           if not specified, will throw\n\n   To read data structures only, use clojure.tools.reader.edn/read\n\n   Note that the function signature of clojure.tools.reader/read and\n   clojure.tools.reader.edn/read is not the same for eof-handling"}, read-set {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 413, :column 8, :end-line 413, :end-column 16, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-set, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, read-symbol {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 334, :column 8, :end-line 334, :end-column 19, :private true, :arglists (quote ([rdr initch]))}, :private true, :name cljs.tools.reader/read-symbol, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 19, :method-params ([rdr initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr initch]))}, read-unquote {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 613, :column 8, :end-line 613, :end-column 20, :private true, :arglists (quote ([rdr comma opts pending-forms]))}, :private true, :name cljs.tools.reader/read-unquote, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 20, :method-params ([rdr comma opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 613, :end-line 613, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr comma opts pending-forms]))}, read-map {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 253, :column 8, :end-line 253, :end-column 16, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a map, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-map, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a map, including its location if the reader is an indexing reader"}, read*-internal {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 850, :column 8, :end-line 850, :end-column 22, :private true, :arglists (quote ([reader eof-error? sentinel return-on opts pending-forms]))}, :private true, :name cljs.tools.reader/read*-internal, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 22, :method-params ([reader eof-error? sentinel return-on opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 850, :end-line 850, :max-fixed-arity 6, :fn-var true, :arglists (quote ([reader eof-error? sentinel return-on opts pending-forms]))}, unquote? {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 626, :column 8, :end-line 626, :end-column 16, :private true, :arglists (quote ([form]))}, :private true, :name cljs.tools.reader/unquote?, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 626, :end-line 626, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, default-data-readers {:name cljs.tools.reader/default-data-readers, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 845, :column 1, :end-line 845, :end-column 26, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 845, :column 6, :end-line 845, :end-column 26}, :doc "Default map of data reader functions provided by Clojure.\n  May be overridden by binding *data-readers*", :tag cljs.core/IMap}, macros {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 776, :column 8, :end-line 776, :end-column 14, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/macros, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 14, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 776, :end-line 776, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read-arg {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 589, :column 8, :end-line 589, :end-column 16, :private true, :arglists (quote ([rdr pct opts pending-forms]))}, :private true, :name cljs.tools.reader/read-arg, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr pct opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 589, :end-line 589, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr pct opts pending-forms]))}, match-feature {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 475, :column 8, :end-line 475, :end-column 21, :private true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil."}, :private true, :name cljs.tools.reader/match-feature, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 21, :method-params ([first-line rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-line rdr opts pending-forms])), :doc "Read next feature. If matched, read next form and return.\n   Otherwise, read and skip next form, returning READ_FINISHED or nil."}, read-namespaced-map {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 750, :column 8, :end-line 750, :end-column 27, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-namespaced-map, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 27, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 750, :end-line 750, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, read-syntax-quote {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 744, :column 8, :end-line 744, :end-column 25, :private true, :arglists (quote ([rdr backquote opts pending-forms]))}, :private true, :name cljs.tools.reader/read-syntax-quote, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 25, :method-params ([rdr backquote opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 744, :end-line 744, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr backquote opts pending-forms]))}, READ_FINISHED {:name cljs.tools.reader/READ_FINISHED, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 198, :column 1, :end-line 198, :end-column 33, :private true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 198, :column 20, :end-line 198, :end-column 33, :private true}, :tag object}, read-list {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 219, :column 8, :end-line 219, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a list, including its location if the reader is an indexing reader"}, :private true, :name cljs.tools.reader/read-list, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms])), :doc "Read in a list, including its location if the reader is an indexing reader"}, read-cond-delimited {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 494, :column 8, :end-line 494, :end-column 27, :private true, :arglists (quote ([rdr splicing opts pending-forms]))}, :private true, :name cljs.tools.reader/read-cond-delimited, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 27, :method-params ([rdr splicing opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 494, :end-line 494, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr splicing opts pending-forms]))}, RESERVED_FEATURES {:name cljs.tools.reader/RESERVED_FEATURES, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 439, :column 1, :end-line 439, :end-column 33, :private true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 439, :column 16, :end-line 439, :end-column 33, :private true}, :tag cljs.core/ISet}, dispatch-macros {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 797, :column 8, :end-line 797, :end-column 23, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader/dispatch-macros, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 23, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 797, :end-line 797, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 872, :column 8, :end-line 872, :end-column 13, :private true, :arglists (quote ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader/read*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :arglists-meta (nil nil)}, :method-params ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 872, :end-line 872, :max-fixed-arity 6, :fn-var true, :arglists ([reader eof-error? sentinel opts pending-forms] [reader eof-error? sentinel return-on opts pending-forms])}, *data-readers* {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 829, :column 16, :end-line 829, :end-column 30, :dynamic true}, :name cljs.tools.reader/*data-readers*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 30, :column 1, :dynamic true, :line 829, :end-line 829, :tag cljs.core/IMap, :doc "Map from reader tag symbols to data reader Vars.\n  Reader tags without namespace qualifiers are reserved for Clojure.\n  This light version of tools.reader has no implementation for default\n  reader tags such as #inst and #uuid."}, syntax-quote-coll {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 672, :column 8, :end-line 672, :end-column 25, :private true, :arglists (quote ([type coll]))}, :private true, :name cljs.tools.reader/syntax-quote-coll, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 25, :method-params ([type coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 672, :end-line 672, :max-fixed-arity 2, :fn-var true, :arglists (quote ([type coll]))}, *read-delim* {:name cljs.tools.reader/*read-delim*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 200, :column 1, :end-line 200, :end-column 28, :dynamic true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 200, :column 16, :end-line 200, :end-column 28, :dynamic true}, :tag boolean}, resolve-symbol {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 692, :column 17, :end-line 692, :end-column 31, :dynamic true, :arglists (quote ([s])), :doc "Resolve a symbol s into its fully qualified namespace version"}, :name cljs.tools.reader/resolve-symbol, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 31, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 692, :end-line 692, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Resolve a symbol s into its fully qualified namespace version"}, read-delimited {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 213, :column 8, :end-line 213, :end-column 22, :private true, :arglists (quote ([kind delim rdr opts pending-forms])), :doc "Reads and returns a collection ended with delim"}, :private true, :name cljs.tools.reader/read-delimited, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 22, :method-params ([kind delim rdr opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 5, :fn-var true, :arglists (quote ([kind delim rdr opts pending-forms])), :doc "Reads and returns a collection ended with delim"}, read-token {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 48, :column 8, :end-line 48, :end-column 18, :private true, :arglists (quote ([rdr kind initch])), :doc "Read in a single logical token from the reader"}, :private true, :name cljs.tools.reader/read-token, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 18, :method-params ([rdr kind initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr kind initch])), :doc "Read in a single logical token from the reader"}, read-cond {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 524, :column 8, :end-line 524, :end-column 17, :private true, :arglists (quote ([rdr _ opts pending-forms]))}, :private true, :name cljs.tools.reader/read-cond, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr _ opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 524, :end-line 524, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr _ opts pending-forms]))}, upper-limit {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 140, :column 24, :end-line 140, :end-column 35, :const true, :private true}, :private true, :name cljs.tools.reader/upper-limit, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 35, :column 1, :const true, :line 140, :end-line 140, :tag any}, loc-info {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 323, :column 8, :end-line 323, :end-column 16, :private true, :arglists (quote ([rdr line column]))}, :private true, :name cljs.tools.reader/loc-info, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 16, :method-params ([rdr line column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr line column]))}, gensym-env {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 611, :column 26, :end-line 611, :end-column 36, :dynamic true, :private true}, :private true, :name cljs.tools.reader/gensym-env, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 36, :column 1, :dynamic true, :line 611, :end-line 611, :tag clj-nil}, *alias-map* {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 356, :column 16, :end-line 356, :end-column 27, :dynamic true}, :name cljs.tools.reader/*alias-map*, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 27, :column 1, :dynamic true, :line 356, :end-line 356, :tag clj-nil, :doc "Map from ns alias to ns, if non-nil, it will be used to resolve read-time\n   ns aliases.\n\n   Defaults to nil"}, read-regex {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 85, :column 7, :end-line 85, :end-column 17, :arglists (quote ([rdr ch opts pending-forms]))}, :name cljs.tools.reader/read-regex, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :end-column 17, :method-params ([rdr ch opts pending-forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rdr ch opts pending-forms]))}, sb {:name cljs.tools.reader/sb, :file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 46, :column 1, :end-line 46, :end-column 8, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/tools.reader/1.0.5/tools.reader-1.0.5.jar!/cljs/tools/reader.cljs", :line 46, :column 6, :end-line 46, :end-column 8}, :tag goog/string.StringBuffer}, ...}, :cljs.spec/registry-ref [], :require-macros {cljs.tools.reader.reader-types cljs.tools.reader.reader-types}, :cljs.analyzer/constants {:seen #{& :features clojure.core/list :namespaced-map cljs.core/array-map :reader-exception :else cljs.core/hash-map cljs.core/apply :default :symbol :file cljs.core/concat :end-column :read-cond :type :preserve :source :string :vector cljs.core/with-meta :allow :sym :column :illegal-state clojure.core/unquote-splicing :line :list fn* :keyword clojure.core/deref / clojure.core/unquote :end-line cljs.core/vec cljs.core/sequence :regex :unsupported-operation var quote :set :eof cljs.core/hash-set :character :map cljs.core/list :eofthrow :runtime-exception :none}, :order [:regex :character :else :list :file :line :column :end-line :end-column :vector :map :string :symbol / :keyword :set :none :default :features :preserve :allow :read-cond :type :runtime-exception :illegal-state & fn* clojure.core/unquote-splicing clojure.core/unquote clojure.core/list :source cljs.core/with-meta cljs.core/sequence cljs.core/concat cljs.core/apply cljs.core/hash-map cljs.core/array-map :sym quote cljs.core/vec cljs.core/hash-set cljs.core/list :unsupported-operation :namespaced-map clojure.core/deref var :reader-exception :eof :eofthrow]}, :doc "A clojure reader in clojure"}