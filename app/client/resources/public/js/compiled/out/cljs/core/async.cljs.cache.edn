{:rename-macros {}, :renames {}, :externs {Error {}, Array {}, Object {}}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{reduce take map transduce into partition merge partition-by}, :name cljs.core.async, :imports nil, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, cljs.core.async.impl.dispatch cljs.core.async.impl.dispatch, helpers cljs.core.async.impl.ioc-helpers, impl cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, timers cljs.core.async.impl.timers, dispatch cljs.core.async.impl.dispatch, cljs.core.async.impl.ioc-helpers cljs.core.async.impl.ioc-helpers, buffers cljs.core.async.impl.buffers, cljs.core.async.impl.timers cljs.core.async.impl.timers}, :cljs.spec/speced-vars [], :uses nil, :defs {Pub {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 599, :column 14, :end-line 599, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}}, :protocol-symbol true, :name cljs.core.async/Pub, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 17, :column 1, :line 599, :protocol-info {:methods {sub* [[p v ch close?]], unsub* [[p v ch]], unsub-all* [[p] [p v]]}}, :info nil, :end-line 599, :tag any, :impls #{cljs.core.async/t_cljs$core$async39235}, :doc nil, :jsdoc ("@interface")}, reduce {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 359, :column 7, :end-line 359, :end-column 13, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result."}, :name cljs.core.async/reduce, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 13, :method-params ([f init ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f init ch])), :doc "f should be a function of 2 arguments. Returns a channel containing\n  the single result of applying f to init and the first item from the\n  channel, then applying f to that result and the 2nd item, etc. If\n  the channel closes without yielding items, returns init and f is not\n  called. ch must close before reduce produces a result."}, remove> {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 819, :column 7, :end-line 819, :end-column 14, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead"}, :name cljs.core.async/remove>, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 14, :method-params ([p ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 819, :end-line 819, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p ch])), :doc "Deprecated - this function will be removed. Use transducer instead"}, timeout {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 78, :column 7, :end-line 78, :end-column 14, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs"}, :name cljs.core.async/timeout, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 14, :method-params ([msecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msecs])), :doc "Returns a channel that will close after msecs"}, unsub* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 601, :column 4, :end-line 601, :end-column 10, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p v ch]))}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :method-params ([p v ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 599, :end-line 601, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p v ch])), :doc nil}, admix* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 479, :column 4, :end-line 479, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/admix*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil}, unmix* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 480, :column 4, :end-line 480, :end-column 10, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m ch]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/unmix*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :method-params ([m ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 480, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ch])), :doc nil}, mapcat* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 843, :column 8, :end-line 843, :end-column 15, :private true, :arglists (quote ([f in out]))}, :private true, :name cljs.core.async/mapcat*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 15, :method-params ([f in out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 843, :end-line 843, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f in out]))}, mix {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 496, :column 7, :end-line 496, :end-column 10, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"}, :name cljs.core.async/mix, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :method-params ([out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 496, :end-line 496, :max-fixed-arity 1, :fn-var true, :arglists (quote ([out])), :doc "Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"}, pub {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 604, :column 7, :end-line 604, :end-column 10, :arglists (quote ([ch topic-fn] [ch topic-fn buf-fn])), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}}, :name cljs.core.async/pub, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :arglists-meta (nil nil)}, :method-params ([ch topic-fn] [ch topic-fn buf-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 3, :fn-var true, :arglists ([ch topic-fn] [ch topic-fn buf-fn]), :doc "Creates and returns a pub(lication) of the supplied channel,\n  partitioned into topics by the topic-fn. topic-fn will be applied to\n  each value on the channel and the result will determine the 'topic'\n  on which that value will be put. Channels can be subscribed to\n  receive copies of topics using 'sub', and unsubscribed using\n  'unsub'. Each topic will be handled by an internal mult on a\n  dedicated channel. By default these internal channels are\n  unbuffered, but a buf-fn can be supplied which, given a topic,\n  creates a buffer with desired properties.\n\n  Each item is distributed to all subs in parallel and synchronously,\n  i.e. each sub must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow subs from holding up the pub.\n\n  Items received when there are no matching subs get dropped.\n\n  Note that if buf-fns are used then each topic is handled\n  asynchronously, i.e. if a channel is subscribed to more than one\n  topic it should not expect them to be interleaved identically with\n  the source."}, take {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 741, :column 7, :end-line 741, :end-column 11, :arglists (quote ([n ch] [n ch buf-or-n])), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/take, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([n ch] [n ch buf-or-n]), :arglists ([n ch] [n ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([n ch] [n ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 741, :end-line 741, :max-fixed-arity 3, :fn-var true, :arglists ([n ch] [n ch buf-or-n]), :doc "Returns a channel that will return, at most, n items from ch. After n items\n   have been returned, or ch has been closed, the return chanel will close.\n\n  The output channel is unbuffered by default, unless buf-or-n is given."}, unsub-all* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 602, :column 4, :end-line 602, :end-column 14, :protocol cljs.core.async/Pub, :doc nil, :arglists (quote ([p] [p v])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}}, :protocol cljs.core.async/Pub, :name cljs.core.async/unsub-all*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p] [p v]), :arglists ([p] [p v]), :arglists-meta (nil nil)}, :method-params ([p] [p v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 599, :end-line 602, :max-fixed-arity 2, :fn-var true, :arglists ([p] [p v]), :doc nil}, <! {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 83, :column 7, :end-line 83, :end-column 9, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed"}, :name cljs.core.async/<!, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 9, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port])), :doc "takes a val from port. Must be called inside a (go ...) block. Will\n  return nil if closed. Will park if nothing is available.\n  Returns true unless port is already closed"}, map {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 680, :column 7, :end-line 680, :end-column 10, :arglists (quote ([f chs] [f chs buf-or-n])), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/map, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f chs] [f chs buf-or-n]), :arglists ([f chs] [f chs buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f chs] [f chs buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 680, :end-line 680, :max-fixed-arity 3, :fn-var true, :arglists ([f chs] [f chs buf-or-n]), :doc "Takes a function and a collection of source channels, and returns a\n  channel which contains the values produced by applying f to the set\n  of first items taken from each source channel, followed by applying\n  f to the set of second items from each channel, until any one of the\n  channels is closed, at which point the output channel will be\n  closed. The returned channel will be unbuffered by default, or a\n  buf-or-n can be supplied"}, Mux {:meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 410, :column 14, :end-line 410, :end-column 17, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {muxch* [[_]]}}}, :protocol-symbol true, :name cljs.core.async/Mux, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 17, :column 1, :line 410, :protocol-info {:methods {muxch* [[_]]}}, :info nil, :end-line 410, :tag any, :impls #{cljs.core.async/t_cljs$core$async38832 cljs.core.async/t_cljs$core$async39235 cljs.core.async/t_cljs$core$async39066}, :doc nil, :jsdoc ("@interface")}, ->t_cljs$core$async38437 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([f blockable meta38438])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async38437, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :method-params ([f blockable meta38438]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f blockable meta38438])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async39066 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([out cs solo-modes attrs solo-mode change changed pick calc-state meta39067])), :file nil}, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async39066, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :method-params ([out cs solo-modes attrs solo-mode change changed pick calc-state meta39067]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 11, :factory :positional, :line 541, :max-fixed-arity 10, :fn-var true, :arglists (quote ([out cs solo-modes attrs solo-mode change changed pick calc-state meta39067])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mapcat> {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 861, :column 7, :end-line 861, :end-column 14, :arglists (quote ([f out] [f out buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/mapcat>, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([f out] [f out buf-or-n]), :arglists ([f out] [f out buf-or-n]), :arglists-meta (nil nil)}, :method-params ([f out] [f out buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 861, :end-line 861, :max-fixed-arity 3, :fn-var true, :arglists ([f out] [f out buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead"}, fhnop {:name cljs.core.async/fhnop, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 106, :column 1, :end-line 106, :end-column 21, :private true, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 106, :column 16, :end-line 106, :end-column 21, :private true}, :tag any}, t_cljs$core$async38437 {:num-fields 3, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async38437, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :type true, :anonymous true, :column 4, :line 15, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, buffer {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park."}, :name cljs.core.async/buffer, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a fixed buffer of size n. When full, puts will block/park."}, close! {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 134, :column 7, :end-line 134, :end-column 13, :arglists (quote ([port]))}, :name cljs.core.async/close!, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 13, :method-params ([port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([port]))}, ->t_cljs$core$async39526 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([f ch meta39527])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async39526, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :method-params ([f ch meta39527]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 764, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f ch meta39527])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async38832 {:num-fields 3, :protocols #{cljs.core.async/Mult cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async38832, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 432, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$core$async39532 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([f ch meta39533])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async39532, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :method-params ([f ch meta39533]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 791, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f ch meta39533])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, offer! {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 224, :column 7, :end-line 224, :end-column 13, :arglists (quote ([port val])), :doc "Puts a val into port if it's possible to do so immediately.\n  nil values are not allowed. Never blocks. Returns true if offer succeeds."}, :name cljs.core.async/offer!, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 13, :method-params ([port val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port val])), :doc "Puts a val into port if it's possible to do so immediately.\n  nil values are not allowed. Never blocks. Returns true if offer succeeds."}, chan {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 45, :column 7, :end-line 45, :end-column 11, :arglists (quote ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler])), :doc "Creates a channel with an optional buffer, an optional transducer (like (map f),\n  (filter p) etc or a composition thereof), and an optional exception handler.\n  If buf-or-n is a number, will create and use a fixed buffer of that size. If a\n  transducer is supplied a buffer must be specified. ex-handler must be a\n  fn of one argument - if an exception occurs during transformation it will be called\n  with the thrown value as an argument, and any non-nil return value will be placed\n  in the channel.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists-meta (nil nil nil nil)}}, :name cljs.core.async/chan, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :arglists-meta (nil nil nil nil)}, :method-params ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists ([] [buf-or-n] [buf-or-n xform] [buf-or-n xform ex-handler]), :doc "Creates a channel with an optional buffer, an optional transducer (like (map f),\n  (filter p) etc or a composition thereof), and an optional exception handler.\n  If buf-or-n is a number, will create and use a fixed buffer of that size. If a\n  transducer is supplied a buffer must be specified. ex-handler must be a\n  fn of one argument - if an exception occurs during transformation it will be called\n  with the thrown value as an argument, and any non-nil return value will be placed\n  in the channel."}, solo-mode* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 483, :column 4, :end-line 483, :end-column 14, :protocol cljs.core.async/Mix, :doc nil, :arglists (quote ([m mode]))}, :protocol cljs.core.async/Mix, :name cljs.core.async/solo-mode*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 14, :method-params ([m mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 483, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m mode])), :doc nil}, tap {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 461, :column 7, :end-line 461, :end-column 10, :arglists (quote ([mult ch] [mult ch close?])), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/tap, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([mult ch] [mult ch close?]), :arglists ([mult ch] [mult ch close?]), :arglists-meta (nil nil)}, :method-params ([mult ch] [mult ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 461, :end-line 461, :max-fixed-arity 3, :fn-var true, :arglists ([mult ch] [mult ch close?]), :doc "Copies the mult source onto the supplied channel.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter."}, admix {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 566, :column 7, :end-line 566, :end-column 12, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix"}, :name cljs.core.async/admix, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 12, :method-params ([mix ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 566, :end-line 566, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix ch])), :doc "Adds ch as an input to the mix"}, promise-chan {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 67, :column 7, :end-line 67, :end-column 19, :arglists (quote ([] [xform] [xform ex-handler])), :doc "Creates a promise channel with an optional transducer, and an optional\n  exception-handler. A promise channel can take exactly one value that consumers\n  will receive. Once full, puts complete but val is dropped (no transfer).\n  Consumers will block until either a value is placed in the channel or the\n  channel is closed. See chan for the semantics of xform and ex-handler.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [xform] [xform ex-handler]), :arglists ([] [xform] [xform ex-handler]), :arglists-meta (nil nil nil)}}, :name cljs.core.async/promise-chan, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([] [xform] [xform ex-handler]), :arglists ([] [xform] [xform ex-handler]), :arglists-meta (nil nil nil)}, :method-params ([] [xform] [xform ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists ([] [xform] [xform ex-handler]), :doc "Creates a promise channel with an optional transducer, and an optional\n  exception-handler. A promise channel can take exactly one value that consumers\n  will receive. Once full, puts complete but val is dropped (no transfer).\n  Consumers will block until either a value is placed in the channel or the\n  channel is closed. See chan for the semantics of xform and ex-handler."}, unique {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 869, :column 7, :end-line 869, :end-column 13, :arglists (quote ([ch] [ch buf-or-n])), :doc "Deprecated - this function will be removed. Use transducer instead", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}}, :name cljs.core.async/unique, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ch] [ch buf-or-n]), :arglists ([ch] [ch buf-or-n]), :arglists-meta (nil nil)}, :method-params ([ch] [ch buf-or-n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 869, :end-line 869, :max-fixed-arity 2, :fn-var true, :arglists ([ch] [ch buf-or-n]), :doc "Deprecated - this function will be removed. Use transducer instead"}, muxch* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 411, :column 4, :end-line 411, :end-column 10, :protocol cljs.core.async/Mux, :doc nil, :arglists (quote ([_]))}, :protocol cljs.core.async/Mux, :name cljs.core.async/muxch*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_])), :doc nil}, solo-mode {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 593, :column 7, :end-line 593, :end-column 16, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause"}, :name cljs.core.async/solo-mode, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 16, :method-params ([mix mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 593, :end-line 593, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mix mode])), :doc "Sets the solo mode of the mix. mode must be one of :mute or :pause"}, transduce {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 375, :column 7, :end-line 375, :end-column 16, :arglists (quote ([xform f init ch])), :doc "async/reduces a channel with a transformation (xform f).\n  Returns a channel containing the result.  ch must close before\n  transduce produces a result."}, :name cljs.core.async/transduce, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 16, :method-params ([xform f init ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 4, :fn-var true, :arglists (quote ([xform f init ch])), :doc "async/reduces a channel with a transformation (xform f).\n  Returns a channel containing the result.  ch must close before\n  transduce produces a result."}, onto-chan {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 385, :column 7, :end-line 385, :end-column 16, :arglists (quote ([ch coll] [ch coll close?])), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/onto-chan, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([ch coll] [ch coll close?]), :arglists ([ch coll] [ch coll close?]), :arglists-meta (nil nil)}, :method-params ([ch coll] [ch coll close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 3, :fn-var true, :arglists ([ch coll] [ch coll close?]), :doc "Puts the contents of coll into the supplied channel.\n\n  By default the channel will be closed after the items are copied,\n  but can be determined by the close? parameter.\n\n  Returns a channel which will close after the items are copied."}, to-chan {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 401, :column 7, :end-line 401, :end-column 14, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted."}, :name cljs.core.async/to-chan, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 401, :end-line 401, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Creates and returns a channel which contains the contents of coll,\n  closing when exhausted."}, dropping-buffer {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 26, :column 7, :end-line 26, :end-column 22, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer)."}, :name cljs.core.async/dropping-buffer, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a buffer of size n. When full, puts will complete but\n  val will be dropped (no transfer)."}, untap-all {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 474, :column 7, :end-line 474, :end-column 16, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult"}, :name cljs.core.async/untap-all, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 16, :method-params ([mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 474, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult])), :doc "Disconnects all target channels from a mult"}, into {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 734, :column 7, :end-line 734, :end-column 11, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result."}, :name cljs.core.async/into, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 11, :method-params ([coll ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 734, :end-line 734, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll ch])), :doc "Returns a channel containing the single (collection) result of the\n  items taken from the channel conjoined to the supplied\n  collection. ch must close before into produces a result."}, t_cljs$core$async39529 {:num-fields 6, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async39529, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :type true, :anonymous true, :column 10, :line 773, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, pipeline {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 321, :column 7, :end-line 321, :end-column 15, :arglists (quote ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler])), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the transducer xf, with parallelism n. Because\n  it is parallel, the transducer will be applied independently to each\n  element, not across elements, and may produce zero or more outputs\n  per input.  Outputs will be returned in order relative to the\n  inputs. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes.\n\n  Note this is supplied for API compatibility with the Clojure version.\n  Values of N > 1 will not result in actual concurrency in a\n  single-threaded runtime.", :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists-meta (nil nil nil)}}, :name cljs.core.async/pipeline, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :arglists-meta (nil nil nil)}, :method-params ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 6, :fn-var true, :arglists ([n to xf from] [n to xf from close?] [n to xf from close? ex-handler]), :doc "Takes elements from the from channel and supplies them to the to\n  channel, subject to the transducer xf, with parallelism n. Because\n  it is parallel, the transducer will be applied independently to each\n  element, not across elements, and may produce zero or more outputs\n  per input.  Outputs will be returned in order relative to the\n  inputs. By default, the to channel will be closed when the from\n  channel closes, but can be determined by the close?  parameter. Will\n  stop consuming the from channel if the to channel closes.\n\n  Note this is supplied for API compatibility with the Clojure version.\n  Values of N > 1 will not result in actual concurrency in a\n  single-threaded runtime."}, t_cljs$core$async39235 {:num-fields 6, :protocols #{cljs.core.async/Pub cljs.core/IMeta cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async39235, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :type true, :anonymous true, :column 14, :line 633, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$core$async39066 {:num-fields 10, :protocols #{cljs.core/IMeta cljs.core.async/Mix cljs.core.async/Mux cljs.core/IWithMeta}, :name cljs.core.async/t_cljs$core$async39066, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :type true, :anonymous true, :column 11, :line 541, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, sub {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 659, :column 7, :end-line 659, :end-column 10, :arglists (quote ([p topic ch] [p topic ch close?])), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}}, :name cljs.core.async/sub, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([p topic ch] [p topic ch close?]), :arglists ([p topic ch] [p topic ch close?]), :arglists-meta (nil nil)}, :method-params ([p topic ch] [p topic ch close?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 659, :end-line 659, :max-fixed-arity 4, :fn-var true, :arglists ([p topic ch] [p topic ch close?]), :doc "Subscribes a channel to a topic of a pub.\n\n  By default the channel will be closed when the source closes,\n  but can be determined by the close? parameter."}, ->t_cljs$core$async39535 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([p ch meta39536])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async39535, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :method-params ([p ch meta39536]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 805, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p ch meta39536])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, alt-flag {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 153, :column 8, :end-line 153, :end-column 16, :private true, :arglists (quote ([]))}, :private true, :name cljs.core.async/alt-flag, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, ->t_cljs$core$async39529 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([f ch meta39527 _ fn1 meta39530])), :file nil}, :protocols #{cljs.core.async.impl.protocols/Handler cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.core.async/->t_cljs$core$async39529, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :method-params ([f ch meta39527 _ fn1 meta39530]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 10, :factory :positional, :line 773, :max-fixed-arity 6, :fn-var true, :arglists (quote ([f ch meta39527 _ fn1 meta39530])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, map> {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 788, :column 7, :end-line 788, :end-column 11, :arglists (quote ([f ch])), :doc "Deprecated - this function will be removed. Use transducer instead"}, :name cljs.core.async/map>, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 11, :method-params ([f ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 788, :end-line 788, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f ch])), :doc "Deprecated - this function will be removed. Use transducer instead"}, pipeline* {:protocol-inline nil, :meta {:file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :line 256, :column 8, :end-line 256, :end-column 17, :private true, :arglists (quote ([n to xf from close? ex-handler type]))}, :private true, :name cljs.core.async/pipeline*, :variadic false, :file "file:/Users/allanjiang/.m2/repository/org/clojure/core.async/0.3.442/core.async-0.3.442.jar!/cljs/core/async.cljs", :end-column 17, :method-params ([n to xf from close? ex-handler type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 7, :fn-var true, :arglists (quote ([n to xf from close? ex-handler type]))}, ...}, :cljs.spec/registry-ref [], :require-macros {ioc cljs.core.async.impl.ioc-macros, cljs.core.async.impl.ioc-macros cljs.core.async.impl.ioc-macros, cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:async cljs.core.async/t_cljs$core$async39526 change meta38438 p :mutes blockable :solo :cljs.core.async/nothing :else meta38453 :default cb buf-fn solo-mode :compute meta39527 mults fn1 :recur _ meta38450 pick flag ensure-mult cs meta38833 meta39533 meta39236 :priority :solos meta39067 ch meta39536 calc-state :pause topic-fn :tag out changed solo-modes meta39530 :mute attrs :reads f}, :order [f blockable meta38438 flag meta38450 cb meta38453 :priority :default :recur :else :async :compute ch cs meta38833 :pause :mute :solo :solos :mutes :reads out solo-modes attrs solo-mode change changed pick calc-state meta39067 topic-fn buf-fn mults ensure-mult meta39236 meta39527 _ :tag cljs.core.async/t_cljs$core$async39526 fn1 meta39530 meta39533 p meta39536 :cljs.core.async/nothing]}, :doc nil}