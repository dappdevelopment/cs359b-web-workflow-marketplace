{:rename-macros {}, :renames {}, :use-macros {get-punch-access oops.constants, get-dot-access oops.constants, get-soft-access oops.constants, native-array-aware-* oops.spec}, :excludes #{}, :name oops.sdefs, :imports nil, :requires {s cljs.spec.alpha, cljs.spec.alpha cljs.spec.alpha, clojure.spec.alpha cljs.spec.alpha}, :cljs.spec/speced-vars [], :uses nil, :cljs.spec/registry-ref [[:oops.sdefs/obj-key (s/or :string cljs.core/string? :keyword cljs.core/keyword?)] [:oops.sdefs/obj-selector (s/or :key :oops.sdefs/obj-key :selector (oops.spec/native-array-aware-* :oops.sdefs/obj-selector))] [:oops.sdefs/obj-path-mode #{(get-soft-access) (get-punch-access) (get-dot-access)}] [:oops.sdefs/obj-path-key cljs.core/string?] [:oops.sdefs/obj-path-item (s/tuple :oops.sdefs/obj-path-mode :oops.sdefs/obj-path-key)] [:oops.sdefs/obj-path (s/and cljs.core/array? (cljs.core/fn [arr] (cljs.core/let [pairs (cljs.core/map cljs.core/vec (cljs.core/partition-all 2 arr))] (cljs.spec.alpha/valid? (s/* :oops.sdefs/obj-path-item) pairs))))]], :require-macros {oops.constants oops.constants, oops.spec oops.spec}, :cljs.analyzer/constants {:seen #{cljs.core/array? s/tuple get-punch-access :oops.sdefs/obj-selector :selector cljs.core/keyword? :oops.sdefs/obj-key s/or cljs.core/partial :key :oops.sdefs/obj-path-key :oops.sdefs/obj-path cljs.core/partition-all cljs.core/string? :native-array :string :oops.sdefs/obj-path-mode % arr cljs.core/map oops.spec/native-array-aware-* get-dot-access cljs.core/let get-soft-access clojure.spec.alpha/* s/and :keyword cljs.spec.alpha/valid? cljs.core/fn :oops.sdefs/obj-path-item cljs.core/vec :regex pairs cljs.core/and s/* cljs.core/every?}, :order [:oops.sdefs/obj-key s/or :string cljs.core/string? :keyword cljs.core/keyword? :oops.sdefs/obj-selector :key :selector oops.spec/native-array-aware-* :regex :native-array clojure.spec.alpha/* cljs.core/fn % cljs.core/and cljs.core/array? cljs.core/every? cljs.core/partial cljs.spec.alpha/valid? :oops.sdefs/obj-path-mode get-soft-access get-punch-access get-dot-access :oops.sdefs/obj-path-key :oops.sdefs/obj-path-item s/tuple :oops.sdefs/obj-path s/and arr cljs.core/let pairs cljs.core/map cljs.core/vec cljs.core/partition-all s/*]}, :doc "Spec definitions for our dynamic code."}